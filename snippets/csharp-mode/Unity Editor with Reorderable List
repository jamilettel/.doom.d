# -*- mode: snippet -*-
# name: Unity Editor with Reorderable List
# key: EditorWithReorderableList
# --
using UnityEngine;
using UnityEditor;
using UnityEditorInternal;

[CustomEditor(typeof(${1:${TM_FILENAME_BASE/(.*)Editor/${1}/}}))]
public class `(file-name-base (buffer-file-name))` : Editor {
    private SerializedProperty _property;
    private ReorderableList _list;

    private void OnEnable() {
        _property = serializedObject.FindProperty("${2}");
        _list = new ReorderableList(serializedObject, _property, true, true, true, true) {
            drawHeaderCallback = DrawListHeader,
            drawElementCallback = DrawListElement
        };
    }

    private void DrawListHeader(Rect rect) {
        GUI.Label(rect, "${2}");
    }

    private void DrawListElement(Rect rect, int index, bool isActive, bool isFocused) {
        var item = _property.GetArrayElementAtIndex(index);
        EditorGUI.PropertyField(rect, item);
        $0
    }

    public override void OnInspectorGUI() {
        serializedObject.Update();
        EditorGUILayout.Space();
        _list.DoLayoutList();
        serializedObject.ApplyModifiedProperties();
    }
}
